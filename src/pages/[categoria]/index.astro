---
import Layout from "../../layouts/Layout.astro";
import { categorias } from "@/data/categorias";
import { generarSlug } from "../../utils/slug";

// ðŸ“Œ Generar rutas estÃ¡ticas para categorÃ­as
export async function getStaticPaths() {
  return categorias.map((categoria) => ({
    params: { categoria: generarSlug(categoria.nombre) },
  }));
}

// ðŸ“Œ Obtener la categorÃ­a desde la URL
const { categoria } = Astro.params as { categoria?: string };

// ðŸ“Œ Buscar la categorÃ­a real usando slug generado
const categoriaData = categorias.find(
  (c) => generarSlug(c.nombre) === categoria
);

// ðŸ“Œ Extraer productos (o arreglo vacÃ­o si no se encuentra)
const productos = categoriaData?.productos ?? [];

console.log("ðŸ“¦ CategorÃ­a:", categoriaData);
---

<Layout>
  <h1 class="text-3xl font-bold text-center my-6 capitalize">
    {categoriaData?.nombre ?? "CategorÃ­a no encontrada"}
  </h1>

  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 px-4">
    {
      productos.length > 0 ? (
        productos.map((producto) => {
          const slug = generarSlug(producto.nombre);
          const imagenPrincipal = Array.isArray(producto.img)
            ? producto.img[0]
            : producto.img;

          const moneda =
            "moneda" in producto && typeof producto.moneda === "string"
              ? producto.moneda
              : "$";
          const formatos =
            "formatos" in producto && Array.isArray(producto.formatos)
              ? producto.formatos
              : [];

          return (
            <a
              href={`/${categoria}/${slug}`}
              class="block bg-gradient-to-br from-white via-gray-50 to-gray-100 p-6 rounded-lg shadow hover:shadow-xl hover:scale-105 transition-all"
            >
              <img
                src={imagenPrincipal}
                alt={producto.nombre}
                class="w-full h-48 object-cover rounded mb-4"
              />

              <h2 class="text-xl font-semibold text-center text-gray-800">
                {producto.nombre}
              </h2>

              {producto.descripcion && (
                <p class="text-center text-sm text-gray-600 mt-1">
                  {producto.descripcion}
                </p>
              )}

{/*               {formatos.length > 0 && (
                <div class="mt-3 text-sm text-center text-green-700 space-y-1">
                  {formatos.map((f) => (
                    <p>
                      <strong>{f.nombre}:</strong> {moneda}
                      {f.precio.toFixed(2)}
                    </p>
                  ))}
                </div>
              )} */}
            </a>
          );
        })
      ) : (
        <p class="text-center text-gray-500">
          No hay productos en esta categorÃ­a.
        </p>
      )
    }
  </div>
</Layout>
