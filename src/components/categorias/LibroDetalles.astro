---
const { producto } = Astro.props;

const imagenes = Array.isArray(producto.img) ? producto.img : [producto.img];
const generos = Array.isArray(producto.genero)
  ? producto.genero
  : producto.genero
    ? [producto.genero]
    : [];
const moneda = producto.moneda ?? "$";
const formatos = Array.isArray(producto.formatos) ? producto.formatos : [];
---

<div class="container mx-auto px-4 py-10">
  <div class="flex flex-col md:flex-row gap-8">
    <!-- Imágenes -->
    <div class="md:w-1/2 flex flex-col gap-4">
      <div class="w-full h-[400px] overflow-hidden rounded-xl shadow-xl">
        <img
          id="imagenPrincipal"
          src={imagenes[0]}
          alt={producto.nombre}
          class="w-full h-full object-cover"
        />
      </div>
      {
        imagenes.length > 1 && (
          <div class="flex gap-4 justify-center">
            {imagenes.map((img: string, i: number) => (
              <img
                src={img}
                alt={`${producto.nombre} ${i + 1}`}
                class="miniatura w-16 h-20 object-cover rounded cursor-pointer border-2 border-transparent hover:border-blue-400 transition"
              />
            ))}
          </div>
        )
      }
    </div>

    <!-- Detalles -->
    <div class="md:w-2/3 space-y-4">
      <p class="text-sm text-gray-500 uppercase">Categoría: Libros</p>

      <h1 class="text-3xl font-bold text-gray-800 mt-2 mb-4">
        {producto.nombre}
      </h1>

      {
        producto.autor && (
          <p>
            <strong>Autor:</strong> {producto.autor}
          </p>
        )
      }
      {
        producto.editorial && (
          <p>
            <strong>Editorial:</strong> {producto.editorial}
          </p>
        )
      }
      {
        producto.idioma && (
          <p>
            <strong>Idioma:</strong> {producto.idioma}
          </p>
        )
      }
      {
        producto.paginas && (
          <p>
            <strong>Páginas:</strong> {producto.paginas}
          </p>
        )
      }
      {
        producto.publicacion && (
          <p>
            <strong>Publicado:</strong> {producto.publicacion}
          </p>
        )
      }
      {
        generos.length > 0 && (
          <p>
            <strong>Género:</strong> {generos.join(", ")}
          </p>
        )
      }
      {
        producto.valoracion && (
          <p class="text-yellow-500 font-semibold">
            ⭐ Valoración: {producto.valoracion}/5
          </p>
        )
      }

      <!-- Precio y formatos -->
      {
        formatos.length > 0 && (
          <div class="space-y-4">
            {formatos.length > 1 && (
              <div class="flex gap-4 flex-wrap">
                {formatos.map(
                  (
                    formato: { nombre: string; precio: number },
                    index: number
                  ) => (
                    <button
                      class={`btn-formato px-4 py-2 rounded-lg font-semibold transition ${
                        index === 0
                          ? "bg-blue-600 text-white shadow-lg"
                          : "bg-gray-200 text-gray-800"
                      }`}
                      data-precio={formato.precio}
                    >
                      {formato.nombre}
                    </button>
                  )
                )}
              </div>
            )}
            <div id="precioLibro" class="text-2xl font-bold text-green-600">
              {moneda}
              {formatos[0].precio.toFixed(2)}
            </div>
          </div>
        )
      }

      <!-- Comprar -->
      {
        producto.link && (
          <a
            href={
              Array.isArray(producto.link) ? producto.link[0] : producto.link
            }
            target="_blank"
            class="block bg-red-500 hover:bg-red-600 text-white py-3 rounded-lg font-bold text-center transition"
          >
            Comprar Ahora
          </a>
        )
      }

      <!-- Descripción -->
      <div>
        <h3 class="text-xl font-semibold">Descripción</h3>
        <p class="text-gray-700 mt-2 leading-relaxed">{producto.descripcion}</p>
      </div>
    </div>
  </div>
</div>

<!-- Script funcional -->
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const imagenPrincipal = document.getElementById(
      "imagenPrincipal"
    ) as HTMLImageElement | null;
    const miniaturas = document.querySelectorAll(".miniatura") as NodeListOf<HTMLImageElement>;
    const botonesFormato = document.querySelectorAll(".btn-formato") as NodeListOf<HTMLButtonElement>;
    const precioLibro = document.getElementById("precioLibro");

    // Cambiar imagen principal
    miniaturas.forEach((mini) => {
      mini.addEventListener("click", () => {
        if (imagenPrincipal) {
          imagenPrincipal.src = mini.src;
        }
      });
    });

    // Cambiar precio según el botón
    botonesFormato.forEach((btn) => {
      btn.addEventListener("click", () => {
        const precio = btn.dataset.precio;
        if (precioLibro && precio) {
          precioLibro.textContent = "$" + parseFloat(precio).toFixed(2);
        }

        // Reset estilos
        botonesFormato.forEach((b) =>
          b.classList.replace("bg-blue-600", "bg-gray-200")
        );
        botonesFormato.forEach((b) =>
          b.classList.replace("text-white", "text-gray-800")
        );

        // Activar botón actual
        btn.classList.add("bg-blue-600", "text-white", "shadow-lg");
        btn.classList.remove("bg-gray-200", "text-gray-800");
      });
    });
  });
</script>
